---
description: コードレビューとコード分析のためのガイドライン
globs:
  - "**/*.*"
alwaysApply: true
---

# コードレビューとコード分析

@global.mdc

## コードレビュー方針

1. **レビューの焦点**
   - コードの品質（可読性、保守性、テスト可能性）
   - セキュリティの問題（インジェクション攻撃、認証の欠陥など）
   - パフォーマンスの懸念（不要なデータベースクエリ、非効率なアルゴリズムなど）
   - ビジネスロジックの正確さ
   - エラー処理の完全性

2. **レビュースタイル**
   - 建設的でポジティブな方法でフィードバックを提供する
   - 問題の説明とその理由を明確に述べる
   - できる限り具体的な改善案を提案する
   - 重要度に応じて問題に優先順位を付ける（重大、中程度、軽微）

## コード分析パターン

1. **一般的なアンチパターン**
   - コードの重複（DRY原則の違反）
   - 過度に複雑な関数やメソッド（高いサイクロマティック複雑性）
   - グローバル状態への依存
   - 過度に深いネスト
   - マジックナンバーやハードコードされた値
   - 不明確な命名

2. **FastAPI固有のアンチパターン**
   - 非同期関数内での同期I/Oの使用
   - 例外の不適切な処理
   - エンドポイントにおけるレスポンスモデルの欠如
   - 過度に複雑なパス操作関数
   - 重いデータベース操作をエンドポイントハンドラ内で直接実行する

3. **セキュリティ問題**
   - SQLインジェクションの脆弱性
   - クロスサイトスクリプティング（XSS）の脆弱性
   - 不適切な認証・認可
   - 機密情報の漏洩（ログへの出力、エラーメッセージなど）
   - レート制限の欠如

## コードレビューのベストプラクティス

1. **効果的なレビュー**
   - コードの部分ごとに分けてレビューする
   - コードの意図を理解してから批判する
   - コーディング標準と一致しているかを確認する
   - コードの動作だけでなく、コードが存在しない可能性のあるバグも考慮する
   - 特に成功したコードや効果的な実装についてもフィードバックする

2. **建設的なフィードバック**
   - 「なぜ」という理由を含めて問題を説明する
   - 人ではなくコードに焦点を当てる
   - 改善のための具体的な提案を提供する
   - 学習リソースへのリンクを共有する（該当する場合）
   - レビュー後のフォローアップと継続的なサポートを提供する

## コード分析とレビューのためのチェックリスト

1. **一般的なチェックポイント**
   - コードは明確で読みやすいか？
   - 関数とクラスは単一責任の原則に従っているか？
   - エラー処理は適切に実装されているか？
   - 潜在的なエッジケースは考慮されているか？
   - コードは効率的か？

2. **FastAPI特有のチェックポイント**
   - エンドポイントは適切なHTTPメソッドを使用しているか？
   - レスポンスモデルが定義されているか？
   - 依存性注入は効果的に使用されているか？
   - パスパラメータ、クエリパラメータ、リクエストボディは適切に使い分けられているか？
   - ステータスコードは適切に設定されているか？
   - Swaggerドキュメントは明確で有用か？
