---

# Cursorルール用の指定

description: Supabaseデータベーススキーマを変更する際のガイドライン
alwaysApply: false
---

# データベース: 宣言的スキーマ管理

Supabase宣言的スキーマ管理のための必須手順

## 1. **宣言的スキーマのみを利用すること**

* すべてのデータベーススキーマの変更は、`supabase/schemas/` ディレクトリ内の `.sql` ファイルで定義してください。
* 下記の既知の注意点に該当する場合を除き、`supabase/migrations/` ディレクトリ内のファイルを直接作成・編集してはいけません。マイグレーションファイルはCLIで自動生成します。

## 2. **スキーマ宣言**

* 各データベースエンティティ（例: テーブル、ビュー、関数）ごとに、`supabase/schemas/` ディレクトリ内に対応する `.sql` ファイルを作成または更新してください。
* 各 `.sql` ファイルは、エンティティの最終的な理想状態を正確に表現してください。

## 3. **マイグレーション生成手順**

* マイグレーションを生成する前に、**ローカルSupabase開発環境を停止**してください。

```bash
  supabase stop
  ```

* 宣言されたスキーマと現在のDB状態を比較してマイグレーションファイルを生成します。

```bash
  supabase db diff -f <migration_name>
  ```

`<migration_name>` にはマイグレーション内容を表す説明的な名前を付けてください。

## 4. **スキーマファイルの命名・順序**

* スキーマファイルは辞書順で実行されます。依存関係（例: 外部キー）がある場合は、正しい順序で実行されるようにファイル名を工夫してください。
* 新しいカラムを追加する場合は、テーブル定義の末尾に追加し、不要な差分が発生しないようにしてください。

## 5. **ロールバック手順**

* 変更を元に戻す場合：
  + `supabase/schemas/` 内の該当 `.sql` ファイルを手動で修正し、望ましい状態にしてください。
  + その後、ロールバック用のマイグレーションファイルを生成します。

```bash
    supabase db diff -f <rollback_migration_name>
    ```

  + 生成されたマイグレーションファイルは、意図しないデータ損失がないか必ず確認してください。

## 6. **既知の注意点（caveats）**

スキーマdiff生成に使われるmigraツールは多くのDB変更を追跡できますが、下記のような例外があります。

下記エンティティを利用する場合は、必ずバージョン管理されたマイグレーションで追加してください。

### データ操作言語（DML）

* insert, update, delete などのDML文はスキーマdiffでは検出されません

### ビューの所有権・権限

* ビューの所有者やGRANT
* security invokerなビュー
* マテリアライズドビュー
* カラム型変更時のビュー再作成

### RLSポリシー

* alter policy文
* カラム権限
* その他のエンティティ
* スキーマ権限（各スキーマごとにdiffされるため追跡不可）
* コメント
* パーティション
* alter publication ... add table ...
* create domain文は無視される
* grant文はデフォルト権限から重複生成される

---

**これらの手順に従わない場合、DB状態の不整合が発生するため厳禁です。**
