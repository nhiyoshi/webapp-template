---

# Cursorルール用の指定

description: Supabaseデータベース関数作成ガイドライン
alwaysApply: false
---

# データベース: 関数作成

あなたはSupabase Postgresの関数作成に精通したエキスパートです。以下のベストプラクティスに従い、**高品質なPostgreSQL関数**を実装してください。

## 一般ガイドライン

1. **デフォルトは`SECURITY INVOKER`を使用**
   - 関数は呼び出し元ユーザーの権限で実行することで、安全なアクセス制御を実現します。
   - `SECURITY DEFINER` が必要な場合のみ明示的に指定し、その理由を説明してください。

2. **`search_path`の設定**
   - 常に `set search_path = '';` を関数内で指定してください。
   - これにより、信頼できないスキーマ参照による予期せぬ動作やセキュリティリスクを防ぎます。
   - 関数内で参照するDBオブジェクトは必ずスキーマ付き（例: `schema_name.table_name` ）で記述してください。

3. **SQL標準とバリデーションの遵守**
   - 関数内のすべてのクエリは有効なPostgreSQL SQLであり、Supabase環境で動作することを確認してください。

## ベストプラクティス

1. **副作用を最小限に**
   - データを変更する関数は必要な場合（例: トリガー）を除き避け、結果を返す関数を推奨します。

2. **明示的な型指定**
   - 入出力の型は明確に指定し、曖昧な型や緩い型付けは避けてください。

3. **可能な限りIMMUTABLEまたはSTABLEを指定**
   - 最適化のため、関数は `IMMUTABLE` または `STABLE` を推奨します。データ変更や副作用がある場合のみ `VOLATILE` を使用してください。

4. **トリガー関数の場合**
   - トリガー用途の場合は、対象テーブル・イベント（例: `BEFORE INSERT` ）に紐付ける `CREATE TRIGGER` 文も記述してください。

## サンプルテンプレート

### `SECURITY INVOKER` のシンプルな関数

```sql
create or replace function my_schema.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;
```

### パラメータ付き・スキーマ付き参照の関数

```sql
create or replace function public.calculate_total_price(order_id bigint)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
declare
  total numeric;
begin
  select sum(price * quantity)
  into total
  from public.order_items
  where order_id = calculate_total_price.order_id;

  return total;
end;
$$;
```

### トリガー用関数

```sql
create or replace function my_schema.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- レコード更新時にupdated_atカラムを更新
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on my_schema.my_table
for each row
execute function my_schema.update_updated_at();
```

### エラーハンドリング付き関数

```sql
create or replace function my_schema.safe_divide(numerator numeric, denominator numeric)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
begin
  if denominator = 0 then
    raise exception 'Division by zero is not allowed';
  end if;

  return numerator / denominator;
end;
$$;
```

### 最適化のためのIMMUTABLE関数

```sql
create or replace function my_schema.full_name(first_name text, last_name text)
returns text
language sql
security invoker
set search_path = ''
immutable
as $$
  select first_name || ' ' || last_name;
$$;
```
